[Topology]

# str: tuples separated by semi-colon
# Each tuple is a network link, host-switch or switch-switch.
# Format of each tuple is (linkID, node1, node2), linkIDs should be integers starting at 1.
# It is recommended that switch-switch links are specified first, followed by switch-host links.
# B4 example:
links: (1,h1,s1);(2,h2,s1);(3,h3,s2);(4,h4,s2);(5,s3,s1);(6,s3,s2);(7,s17,s3);(8,s18,s3);(9,s4,s1);(10,s4,s2);(11,s19,s4);(12,s20,s4);(13,h5,s5);(14,h6,s5);(15,h7,s6);(16,h8,s6);(17,s7,s5);(18,s7,s6);(19,s17,s7);(20,s18,s7);(21,s8,s5);(22,s8,s6);(23,s19,s8);(24,s20,s8);(25,h9,s9);(26,h10,s9);(27,h11,s10);(28,h12,s10);(29,s11,s9);(30,s11,s10);(31,s17,s11);(32,s18,s11);(33,s12,s9);(34,s12,s10);(35,s19,s12);(36,s20,s12);(37,h13,s13);(38,h14,s13);(39,h15,s14);(40,h16,s14);(41,s15,s13);(42,s15,s14);(43,s17,s15);(44,s18,s15);(45,s16,s13);(46,s16,s14);(47,s19,s16);(48,s20,s16);

# str
# First two octets of dotted decimal IP address.
base_addr: 10.0

# int [0,255] or str {x}
# Third octet of IP address.
# 'x' denotes that the following address has to be assigned automatically and sequentially for each host.
# At least one of the third and fourth octet must be specified as 'x'.
subnet_addr: x

# int [0,255] or str {x}
# Fourth octet of IP address.
# 'x' denotes that the following address has to be assigned automatically and sequentially for each host.
host_addr: 10

# int [0,32]
# Bit-length of subnet mask (also known as CIDR prefix).
netmask_length: 24

# str {yes|no}
# Manually assign IP addresses to some or all of the hosts.
override_ip: no

# str: tuples separated by semi-colon
# Each tuple denotes (host_ID, IP address).
ip_info: (h1,10.11.12.13/24);(h2,10.20.30.40/24)

# str
# Path to a file that receives topology information in JSON format, which is input to controller.
topology_json_outfile: topo.json

# str {shortest_path | path/to/file.json}
# shortest_path: shortest paths between each pair of nodes will be used to create routing rules.
# path/to/file.json: user-specified paths that will be used to create routing tables.
flow_paths_file: /home/mininet/mininet/mininet/g2-mininet-iperf2-recursiveRestart/examples/pods_t0.5_s0.5/output/input_routing.json

# Parameter spec for a link between a pair of switches. Specs should be separated by semicolon.
# Format of a link spec is: src (str), dst (str), bw (Mbit/s: float), delay (ms: float), loss (percent: float), max_queue_size (int), use_htb {0|1}
# Write 'N/A' for the field that you don't want to specify and just want to keep to it's default value.
# But src and dst must be specified.
link_info: h1, s1, 1.0, 5ms, 0, N/A, N/A; h2, s1, 1.0, 5ms, 0, N/A, N/A; h3, s2, 1.0, 5ms, 0, N/A, N/A; h4, s2, 1.0, 5ms, 0, N/A, N/A; s3, s1, 1.0, 5ms, 0, N/A, N/A; s3, s2, 1.0, 5ms, 0, N/A, N/A; s17, s3, 1.0, 5ms, 0, N/A, N/A; s18, s3, 1.0, 5ms, 0, N/A, N/A; s4, s1, 1.0, 5ms, 0, N/A, N/A; s4, s2, 1.0, 5ms, 0, N/A, N/A; s19, s4, 1.0, 5ms, 0, N/A, N/A; s20, s4, 1.0, 5ms, 0, N/A, N/A; h5, s5, 1.0, 5ms, 0, N/A, N/A; h6, s5, 1.0, 5ms, 0, N/A, N/A; h7, s6, 1.0, 5ms, 0, N/A, N/A; h8, s6, 1.0, 5ms, 0, N/A, N/A; s7, s5, 1.0, 5ms, 0, N/A, N/A; s7, s6, 1.0, 5ms, 0, N/A, N/A; s17, s7, 1.0, 5ms, 0, N/A, N/A; s18, s7, 1.0, 5ms, 0, N/A, N/A; s8, s5, 1.0, 5ms, 0, N/A, N/A; s8, s6, 1.0, 5ms, 0, N/A, N/A; s19, s8, 1.0, 5ms, 0, N/A, N/A; s20, s8, 1.0, 5ms, 0, N/A, N/A; h9, s9, 1.0, 5ms, 0, N/A, N/A; h10, s9, 1.0, 5ms, 0, N/A, N/A; h11, s10, 1.0, 5ms, 0, N/A, N/A; h12, s10, 1.0, 5ms, 0, N/A, N/A; s11, s9, 1.0, 5ms, 0, N/A, N/A; s11, s10, 1.0, 5ms, 0, N/A, N/A; s17, s11, 1.0, 5ms, 0, N/A, N/A; s18, s11, 1.0, 5ms, 0, N/A, N/A; s12, s9, 1.0, 5ms, 0, N/A, N/A; s12, s10, 1.0, 5ms, 0, N/A, N/A; s19, s12, 1.0, 5ms, 0, N/A, N/A; s20, s12, 1.0, 5ms, 0, N/A, N/A; h13, s13, 1.0, 5ms, 0, N/A, N/A; h14, s13, 1.0, 5ms, 0, N/A, N/A; h15, s14, 1.0, 5ms, 0, N/A, N/A; h16, s14, 1.0, 5ms, 0, N/A, N/A; s15, s13, 1.0, 5ms, 0, N/A, N/A; s15, s14, 1.0, 5ms, 0, N/A, N/A; s17, s15, 1.0, 5ms, 0, N/A, N/A; s18, s15, 1.0, 5ms, 0, N/A, N/A; s16, s13, 1.0, 5ms, 0, N/A, N/A; s16, s14, 1.0, 5ms, 0, N/A, N/A; s19, s16, 1.0, 5ms, 0, N/A, N/A; s20, s16, 1.0, 5ms, 0, N/A, N/A; s1, h1, 1.0, 5ms, 0, N/A, N/A; s1, h2, 1.0, 5ms, 0, N/A, N/A; s2, h3, 1.0, 5ms, 0, N/A, N/A; s2, h4, 1.0, 5ms, 0, N/A, N/A; s1, s3, 1.0, 5ms, 0, N/A, N/A; s2, s3, 1.0, 5ms, 0, N/A, N/A; s3, s17, 1.0, 5ms, 0, N/A, N/A; s3, s18, 1.0, 5ms, 0, N/A, N/A; s1, s4, 1.0, 5ms, 0, N/A, N/A; s2, s4, 1.0, 5ms, 0, N/A, N/A; s4, s19, 1.0, 5ms, 0, N/A, N/A; s4, s20, 1.0, 5ms, 0, N/A, N/A; s5, h5, 1.0, 5ms, 0, N/A, N/A; s5, h6, 1.0, 5ms, 0, N/A, N/A; s6, h7, 1.0, 5ms, 0, N/A, N/A; s6, h8, 1.0, 5ms, 0, N/A, N/A; s5, s7, 1.0, 5ms, 0, N/A, N/A; s6, s7, 1.0, 5ms, 0, N/A, N/A; s7, s17, 1.0, 5ms, 0, N/A, N/A; s7, s18, 1.0, 5ms, 0, N/A, N/A; s5, s8, 1.0, 5ms, 0, N/A, N/A; s6, s8, 1.0, 5ms, 0, N/A, N/A; s8, s19, 1.0, 5ms, 0, N/A, N/A; s8, s20, 1.0, 5ms, 0, N/A, N/A; s9, h9, 1.0, 5ms, 0, N/A, N/A; s9, h10, 1.0, 5ms, 0, N/A, N/A; s10, h11, 1.0, 5ms, 0, N/A, N/A; s10, h12, 1.0, 5ms, 0, N/A, N/A; s9, s11, 1.0, 5ms, 0, N/A, N/A; s10, s11, 1.0, 5ms, 0, N/A, N/A; s11, s17, 1.0, 5ms, 0, N/A, N/A; s11, s18, 1.0, 5ms, 0, N/A, N/A; s9, s12, 1.0, 5ms, 0, N/A, N/A; s10, s12, 1.0, 5ms, 0, N/A, N/A; s12, s19, 1.0, 5ms, 0, N/A, N/A; s12, s20, 1.0, 5ms, 0, N/A, N/A; s13, h13, 1.0, 5ms, 0, N/A, N/A; s13, h14, 1.0, 5ms, 0, N/A, N/A; s14, h15, 1.0, 5ms, 0, N/A, N/A; s14, h16, 1.0, 5ms, 0, N/A, N/A; s13, s15, 1.0, 5ms, 0, N/A, N/A; s14, s15, 1.0, 5ms, 0, N/A, N/A; s15, s17, 1.0, 5ms, 0, N/A, N/A; s15, s18, 1.0, 5ms, 0, N/A, N/A; s13, s16, 1.0, 5ms, 0, N/A, N/A; s14, s16, 1.0, 5ms, 0, N/A, N/A; s16, s19, 1.0, 5ms, 0, N/A, N/A; s16, s20, 1.0, 5ms, 0, N/A, N/A

# Similar to above, specify default parameters for all other links.
# {None| comma-separated string}
# If not None: bw, delay, and loss are required, other two parameters can be 'N/A'
# Mininet would use default values (in case of N/A): max_queue_size = None and use_htb = False
# default_link_info: None
default_link_info: 5, 5ms, 0, N/A, N/A


[General]

# str
# Path to a file that receives adjacency list of the graph represent by Mininet network.
adjacency_list_outfile: adj_list.txt

# str
# Path to a file that receives routing information, which is input to controller.
routing_conf_outfile: output_routing.conf

# int {0|1}
# Debug mode off or on.
# If debug mode is on, a tcpdump will be started at each host and a .pcap file will be written out.
debug: 0

# int {0|1}
# Whether or not to start Mininet CLI after creating the network.
start_cli: 0

# str {cubic|reno|bbr}
# TCP congestion control mechanism to use for iperf test.
tcp_congestion_control: bbr


[Monitoring]

# int {0|1}
# Do we want to run pingall test after starting the net?
test_pingall: 1

# int {0|1}
# Do we want to run iperf test on traffic flows specified using traffic_conf parameter?
test_iperf: 1

# str path/to/file.conf
# user-specified traffic flow description.
# Format: int job id, source host, destination host, number of bytes to transfer, time in seconds to start the transfer
traffic_conf_file: traffic.conf

# int {0|1}
# Whether or not to collect switch statistics.
# If yes, a timeseries of queue occupancy and number of dropped packets are written to two separate files.
# This is done for every dst switch (on the interface that connects to src switch) that are specified in link_info above.
monitor_switch_stats: 0

# str: tuples separated by semi-colon
links_to_monitor:

# float
# collection_frequency (seconds) controls (a) iperf interval and (b) switch statistics polling interval.
collection_frequency: 1.0

# float
# CPU and memory utilization polling interval (s).
utilization_monitor_interval = 5.0

# str
# Prefix to append before all result files and plots.
result_prefix: 1

# int {0|1}
# If set to 1, only results processing is done using previously generated output of monitoring.
# If 0, everything is done starting from creating the network, monitoring, and results processing.
only_results_processing = 0

# str (FS|No-FS)
# Method to use to compute flow convergence time.
# Compute convergence time by either using max-min fair-shares ('FS') or without using max-min fair shares ('No-FS').
convergence_time_method: No-FS

# int
# Size of sliding window used while computing convergence time.
window_size: 10

# float
# Threshold to use while computing convergence time.
# Example values: 5.0 (for 'FS' method), 0.03 (for 'No-FS' method).
threshold: 0.03

# int
# Number of consecutive windows to compare while computing convergence time.
# NOTE: this parameter is used only if 'convergence_time_method' is set to 'No-FS'.
num_samples: 15

# int {0|1}
# If set to 1, a PDF plot is generated for each flow's receiver throughput timeseries.
# If set to 0, only some of the throughput-plots are generated: one for each unique src-dst pair.
plot_each_flow: 0

